// Generated by CoffeeScript 1.7.1
(function() {
  var EventEmitter, WebSocket, WebSocketTransport,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  WebSocket = require('ws');

  EventEmitter = require('events').EventEmitter;

  WebSocketTransport = (function(_super) {
    __extends(WebSocketTransport, _super);

    WebSocketTransport.CONNECTING = 0;

    WebSocketTransport.OPEN = 1;

    WebSocketTransport.CLOSING = 2;

    WebSocketTransport.CLOSED = 3;

    function WebSocketTransport(url) {
      this.ws = new WebSocket(url);
      this.ws.on('message', this.onData.bind(this));
      this.ws.on('close', (function(_this) {
        return function() {
          return _this.emit('close');
        };
      })(this));
      this.ws.on('heartbeat', (function(_this) {
        return function() {
          return _this.emit('heartbeat');
        };
      })(this));
      this.ws.on('open', function() {});
      this.ws.on('error', (function(_this) {
        return function(error) {
          return _this.emit('error', error);
        };
      })(this));
      this.readyState = WebSocketTransport.CONNECTING;
    }

    WebSocketTransport.prototype.send = function(message) {
      return this.ws.send(JSON.stringify(message));
    };

    WebSocketTransport.prototype.close = function() {
      return this.ws.close();
    };

    WebSocketTransport.prototype.onData = function(data) {
      var i, payload, type, _results;
      type = data.slice(0, 1);
      switch (type) {
        case 'o':
          return this._dispatchOpen();
        case 'a':
          payload = JSON.parse(data.slice(1) || '[]');
          i = 0;
          _results = [];
          while (i < payload.length) {
            this._dispatchMessage(payload[i]);
            _results.push(i++);
          }
          return _results;
          break;
        case 'm':
          payload = JSON.parse(data.slice(1) || 'null');
          return this._dispatchMessage(payload);
        case 'c':
          payload = JSON.parse(data.slice(1) || '[]');
          return this._didClose(payload[0], payload[1]);
        case 'h':
          return this._dispatchHeartbeat();
      }
    };

    WebSocketTransport.prototype._dispatchOpen = function() {
      if (this.readyState === WebSocketTransport.CONNECTING) {
        this.readyState = WebSocketTransport.OPEN;
        return this.emit('connection');
      } else {
        return this._didClose(1006, 'Server lost session');
      }
    };

    WebSocketTransport.prototype._dispatchMessage = function(data) {
      if (this.readyState !== WebSocketTransport.OPEN) {
        return;
      }
      return this.emit('data', data);
    };

    WebSocketTransport.prototype._dispatchHeartbeat = function(data) {
      if (this.readyState !== WebSocketTransport.OPEN) {
        return;
      }
      return this.emit('heartbeat');
    };

    WebSocketTransport.prototype._didClose = function(code, reason, force) {
      if (this.readyState !== WebSocketTransport.CONNECTING && that.readyState !== WebSocketTransport.OPEN && that.readyState !== WebSocketTransport.CLOSING) {
        throw new Error('INVALID_STATE_ERR');
      }
      if (this._transport) {
        this._transport.close();
        this._transport = null;
      }
      this.readyState = WebSocketTransport.CLOSED;
      return this.emit('close');
    };

    return WebSocketTransport;

  })(EventEmitter);

  module.exports = WebSocketTransport;

}).call(this);
